<div class="container">
<div class="row d-flex justify-content-center">
    <button type="button" class="btn btn-success" id="startButton">Start 20 minute session</button>
    <button type="button" class="btn btn-danger" id="quitButton">Give Up</button>
    <p id="timer"></p>
    <h1 class="title">{{document_title}}</h1>
    <iframe width="800" height="1500" src={{document_link}}>
    </iframe>
</div>
</div>

<style>
.container{
    display: flex;
    justify-content: center;
}
.title{
    display: flex;
    justify-content: center;
}
.btn-success{
    display:flex;
    justify-content: center;
}
#timer {
    font-weight: 600;
    color: rgba(255, 85, 0, 0.861);
    font-size: 40px;
}
</style>


<script>

document.getElementById("quitButton").style.display = "none"
//Function Listening for click event to activate session
document.getElementById("startButton").addEventListener("click", function(){
    document.getElementById("timer").style.color = 'orange'
    document.getElementById("startButton").style.display = "none"
    document.getElementById("quitButton").style.display = "block"
     const userActive = () => {
                if (document.visibilityState !== 'visible') {
                    document.getElementById("startButton").style.display = "block";
                    document.getElementById("quitButton").style.display = "none";
                    document.getElementById("timer").innerHTML = "You left!";
                    document.getElementById("timer").style.color = 'red'
                clearInterval(downloadTimer)
                document.removeEventListener('visibilitychange', userActive)
            }  
        }
    let timeLeft = 10
    //Interval for timer
    var downloadTimer = setInterval(function function2(){
        let minutes = Math.floor(timeLeft / 60)
        let remainingSeconds = timeLeft - (Math.floor(minutes) * 60);

        if(remainingSeconds < 10){
            document.getElementById("timer").innerHTML = `${minutes}:0${remainingSeconds}` +
        "&nbsp"+"remaining";
        } else {
            document.getElementById("timer").innerHTML = `${minutes}:${remainingSeconds}` +
        "&nbsp"+"remaining";
        }
        timeLeft -= 1;
    
        document.addEventListener('visibilitychange', userActive)

       
           if(timeLeft <= 0){  
            document.getElementById("timer").innerHTML = "ðŸ§± Earned!";
            document.getElementById("quitButton").style.display = "none";
            document.getElementById("startButton").style.display = "block";
            document.getElementById("timer").style.color = 'orange'
            document.removeEventListener('visibilitychange', userActive)
            
            //POST Request to Add brick to database
         const brickAdd = async (event) => {
            if (document.getElementById("timer").innerHTML = "ðŸ§± Earned!") {
            let single_brick = 20
            var time = new Date();
            alert(time)
            const date = time.toString().slice(0, 16);
            const hour = time.toString().slice(16, 24);
            function tConvert (time) {
            // Check correct time format and split into components
            time = time.toString ().match (/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

            if (time.length > 1) { // If time format correct
                time = time.slice (1);  // Remove full string match value
                time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
                time[0] = +time[0] % 12 || 12; // Adjust hours
            }
                return time.join (''); // return adjusted time or original string
            }
                var correctHour = tConvert(hour);
                var created_at = `${date}${correctHour}`;
            const response = await fetch(`/api/bricks`, {
                method: 'POST',
                body: JSON.stringify({single_brick, created_at}),
                headers: {
                'Content-Type': 'application/json',
                },
            });
            if (response.ok) {
            } else {
                alert('Failed to add ðŸ§±');
                }
            }
        };
        brickAdd()
        clearInterval(downloadTimer); 
       } 
        }, 1000)
   //Quit Button for stopping session timer
     document.getElementById("quitButton").addEventListener("click", function(){
            clearInterval(downloadTimer)
             document.getElementById("timer").innerHTML = "Better luck next time."
             document.getElementById("startButton").style.display = "block"
             document.getElementById("quitButton").style.display = "none"
             document.getElementById("timer").style.color = 'blue'
        })
         
    });
    
</script>